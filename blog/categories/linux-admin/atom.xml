<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux Admin | Lofyer's Archive]]></title>
  <link href="http://blog.lofyer.org/blog/categories/linux-admin/atom.xml" rel="self"/>
  <link href="http://blog.lofyer.org/"/>
  <updated>2014-09-09T15:21:47+08:00</updated>
  <id>http://blog.lofyer.org/</id>
  <author>
    <name><![CDATA[lofyer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gitlab Quick Deploy]]></title>
    <link href="http://blog.lofyer.org/blog/2014/06/09/gitlab-quick-deploy/"/>
    <updated>2014-06-09T00:00:00+08:00</updated>
    <id>http://blog.lofyer.org/blog/2014/06/09/gitlab-quick-deploy</id>
    <content type="html"><![CDATA[<p>Well, Gitweb + ssh://git@host is out of date. Even we use it for almost 2 years.</p>

<p>We are migrating our repositories to Gitlab which we benefit from its &#8220;issue&#8221; a lot.</p>

<p>Please follow this scripts I wrote.</p>

<p><a href="https://raw.githubusercontent.com/lofyer/onekey-deploy/master/gitlab/install.sh" title="Gitlab quick deploy" target="_blank"><a href="https://raw.githubusercontent.com/lofyer/onekey-deploy/master/gitlab/install.sh">https://raw.githubusercontent.com/lofyer/onekey-deploy/master/gitlab/install.sh</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heartbeat and Drbd Test High Availability]]></title>
    <link href="http://blog.lofyer.org/blog/2014/01/16/heartbeat-drbd-test-high-availability/"/>
    <updated>2014-01-16T00:00:00+08:00</updated>
    <id>http://blog.lofyer.org/blog/2014/01/16/heartbeat-drbd-test-high-availability</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s original article:</p>

<p><a href="http://wiki.weithenn.org/cgi-bin/wiki.pl?HA-DRBD_Heartbeat_%E5%BB%BA%E7%BD%AE_MySQL_%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7">http://wiki.weithenn.org/cgi-bin/wiki.pl?HA-DRBD_Heartbeat_%E5%BB%BA%E7%BD%AE_MySQL_%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7</a></p>

<p>Hosts:<br/>
192.168.1.101 ha1.lofyer.org, 2 hard drive disks
192.168.1.103 ha2.lofyer.org, 2 hard drive disks</p>

<p>Server host, this is the IP of heartbeat service:<br/>
192.168.1.100</p>

<h2>Install</h2>

<p>The repos you need in centos</p>

<pre>[epel]
name=Extra Packages for Enterprise Linux 6 - $basearch
#baseurl=http://download.fedoraproject.org/pub/epel/6/$basearch
mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&#038;arch=$basearch
failovermethod=priority
enabled=1
gpgcheck=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6

[elrepo]
name=ELRepo.org Community Enterprise Linux Repository - el6
baseurl=http://elrepo.org/linux/elrepo/el6/$basearch/
mirrorlist=http://elrepo.org/mirrors-elrepo.el6
enabled=1
gpgcheck=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-elrepo.org
protect=0
</pre>




<pre># yum install drbd84 kmod-drbd84 heartbeat mysql-server
</pre>


<h2>Setup</h2>

<h3>1. Drbd configuration both hosts</h3>

<p><strong>Add following content to file: /etc/hosts</strong></p>

<pre>192.168.1.101 ha1.lofyer.org
192.168.1.103 ha2.lofyer.org
</pre>


<p><strong>Disable selinux and iptables</strong></p>

<pre># sed -i 's/enforcing/permissive/' /etc/selinux/config
# setenforce 0
# iptables -F
# service iptables save
</pre>


<p><strong>Prepare the disk partion</strong></p>

<pre># fdisk /dev/sdb &lt;&lt; EOF
n
p
1


w
EOF
</pre>


<p><strong>Configuration for mysql</strong><br/>
# mkdir db<br/>
# sed -i &rsquo;s/datadir=\/var\/lib\/mysql/datadir=\/db/&lsquo; /etc/my.cnf<br/>
<strong>Configuration for drbd</strong><br/>
file: /etc/drbd.conf</p>

<pre>global {
   minor-count 64;
   usage-count yes;
 }
 common {
   syncer { rate 1000M; }
 }
 resource ha {
   protocol C;
   handlers {
     pri-on-incon-degr "/usr/lib/drbd/notify-pri-on-incon-degr.sh; /usr/lib/drbd/notify-emergency-reboot.sh; echo b > /proc/sysrq-trigger ; reboot -f";
     pri-lost-after-sb "/usr/lib/drbd/notify-pri-lost-after-sb.sh; /usr/lib/drbd/notify-emergency-reboot.sh; echo b > /proc/sysrq-trigger ; reboot -f";
     local-io-error "/usr/lib/drbd/notify-local-io-error.sh; /usr/lib/drbd/notify-emergency-shutdown.sh; echo o > /proc/sysrq-trigger ; halt -f";
     fence-peer "/usr/lib/heartbeat/drbd-peer-outdater -t 5";
     pri-lost "/usr/lib/drbd/notify-pri-lost.sh; /usr/lib/drbd/notify-emergency-reboot.sh; echo b > /proc/sysrq-trigger ; reboot -f";
     split-brain "/usr/lib/drbd/notify-split-brain.sh root";
     out-of-sync "/usr/lib/drbd/notify-out-of-sync.sh root";
   }
   startup {
     wfc-timeout 60;
     degr-wfc-timeout 120;
     outdated-wfc-timeout 2;
   }
   disk {
     on-io-error detach;
     fencing resource-only;
   }
   syncer {
     rate 1000M;
   }
   on ha1.lofyer.org {
     device /dev/drbd0;
     disk /dev/sdb1;
     address 192.168.1.101:7788;
     meta-disk internal;
   }
   on ha2.lofyer.org {
     device /dev/drbd0;
     disk /dev/sdb1;
     address 192.168.1.103:7788;
     meta-disk internal;
   }
 }
</pre>


<p><strong>Chmod for drbd</strong></p>

<pre># chgrp haclient /sbin/drbdsetup
 # chmod o-x /sbin/drbdsetup
 # chmod u+s /sbin/drbdsetup
 # chgrp haclient /sbin/drbdmeta
 # chmod o-x /sbin/drbdmeta
 # chmod u+s /sbin/drbdmeta
</pre>


<p><strong>Resource for drbd</strong></p>

<pre># modprobe drbd
 # dd if=/dev/zero of=/dev/hdb1 bs=1M count=100
 # drbdadm create-md ha
 # service drbd start
 # chkconfig drbd on 
</pre>


<p><strong>Watch drbd status</strong></p>

<pre># watch -n 1 service drbd status
</pre>


<p>You can see that both hosts are Secondary/Secondary.</p>

<h3>2. Drbd configuration on one of hosts, like ha1</h3>

<p><strong>Make ha1 Primary</strong></p>

<pre># drbdadm -- --overwrite-data-of-peer primary ha
 # service drbd status
</pre>


<p>Then you should see Primary and wait for both hosts are UpToDate.<br/>
<strong>Initialization for Mysql</strong><br/>
Make a</p>

<pre># mkfs.ext4 /dev/drbd0
# mount /dev/drbd0 /db
# service mysqld start
</pre>


<p>Now you should see what you have got in /db, then umount /db, stop mysql-server and make ha1 Secondary.</p>

<pre># service mysqld stop
# umount /dev/drbd0
# drbdadm secondary ha
</pre>


<h3>3. Heartbeat configuration on both hosts</h3>

<p>YOU SHOULD MODIFY THE IP IN THE FILE.<br/>
file: /etc/ha.d/ha.cf</p>

<pre>debugfile /var/log/ha-debug
logfile /var/log/ha-log
logfacility local0
autojoin none
ucast eth0 192.168.1.101 # IP of another host
ping 192.168.1.1
respawn hacluster /usr/lib64/heartbeat/ipfail
respawn hacluster /usr/lib64/heartbeat/dopd
apiauth dopd gid=haclient uid=hacluster
udpport 694
warntime 5
deadtime 15
initdead 60
keepalive 2
node node1.weithenn.org
node node2.weithenn.org
auto_failback off    
</pre>


<p>The service will be serve on IP 192.168.1.100.<br/>
file: /etc/ha.d/haresources</p>

<pre>ha1.lofyer.org 192.168.1.100 drbddisk::ha Filesystem::/dev/drbd0::/db::ext4 mysql</pre>


<p><strong>authkeys</strong></p>

<pre>
 #( echo -ne "auth 1\n1 sha1 "; dd if=/dev/urandom bs=512 count=1 | openssl md5) > /etc/ha.d/authkeys
 #cat /etc/ha.d/authkeys
 auth 1
 1 sha1 71461fc5e160d7846c2f4b524f952128
 #chmod 600 /etc/ha.d/authkeys
 #scp /etc/ha.d/authkeys node2:/etc/ha.d/
</pre>


<p><strong>Add mysql entry to heartbeat</strong><br/>
file: /etc/ha.d/resource.d/mysql</p>

<pre>#!/bin/bash
. /etc/ha.d/shellfuncs
case "$1" in
start)
  res=`/etc/init.d/mysqld start`
  ret=$?
  ha_log $res
  exit $ret
  ;;
stop)
  res=`/etc/init.d/mysqld stop`
  ret=$?
  ha_log $res
  exit $ret
  ;;
status)
  if [[ `ps -ef | grep '[m]ysqld'` > 1 ]]; then
     echo "running"
  else
     echo "stopped"
  fi
  ;;
*)
  echo "Usage: mysqld {start|stop|status}"
  exit 1
  ;;
esac
exit 0
</pre>


<p>Add excute permission to it.</p>

<pre># chmod 755 /etc/ha.d/resource.d/mysql 
</pre>


<p><strong>Add heartbeat service to system</strong></p>

<pre># chkconfig --add heartbeat
# chkconfig heartbeat on
# service heartbeat start
</pre>


<p>*You may need modify order of drbd and heartbeat service.<br/>
In /etc/init.d/, the number 85 and 15 represent the order number which the script is to be<br/>
run at start up time and shutdown time.<br/>
# chkconfig: &ndash; 85 15<br/>
*</p>

<h2>Test HA</h2>

<p>On host running mysql service</p>

<p>```</p>

<h1>service heartbeat restart</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix/Linux/MacOS Monitor Tools]]></title>
    <link href="http://blog.lofyer.org/blog/2013/11/29/unixlinuxmacos-monitor-tools/"/>
    <updated>2013-11-29T00:00:00+08:00</updated>
    <id>http://blog.lofyer.org/blog/2013/11/29/unixlinuxmacos-monitor-tools</id>
    <content type="html"><![CDATA[<h2>System</h2>

<p><strong>Web</strong><br/>
munin<br/>
Nagios<br/>
Icinga<br/>
foreman<br/>
monit<br/>
monitorix<br/>
Suricata</p>

<h2>Network</h2>

<p><strong>Web</strong></p>

<p>ntop</p>

<p>cacti</p>

<p><strong>Terminal</strong></p>

<p>ifstatus</p>

<p>dstat</p>

<p>iftop</p>

<p>tcpdump</p>

<p>netstat</p>

<p>iptraf</p>

<p>vnstat</p>

<h2>Cpu/Memory</h2>

<p><strong>Terminal</strong></p>

<p>top</p>

<p>htop</p>

<p>vmstat</p>

<p>pmap</p>

<h2>IO</h2>

<p><strong>Terminal</strong></p>

<p>iotop</p>

<p>iostat</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Foreman/Nagios/Icinga to Make Life Easy&#8230;]]></title>
    <link href="http://blog.lofyer.org/blog/2013/09/24/nagiosicinga-event-handler-life-easy/"/>
    <updated>2013-09-24T00:00:00+08:00</updated>
    <id>http://blog.lofyer.org/blog/2013/09/24/nagiosicinga-event-handler-life-easy</id>
    <content type="html"><![CDATA[<h1>Install nagios in Gentoo/CentOS</h1>

<h2>Gentoo</h2>

<pre># emerge nagios</pre>


<h3>Option: recompile apache for php support</h3>

<p>add use flag &#8220;apache2&#8243; to /etc/portage/make.conf</p>

<pre># emerge --ask --changed-use --deep @world</pre>


<h3>Copy following content to /etc/apache2/vhosts.d/</h3>

<pre>ScriptAlias /nagios/cgi-bin "/usr/lib64/nagios/cgi-bin"
&lt;Directory "/usr/lib64/nagios/cgi-bin"&gt;
#  SSLRequireSSL
    Options ExecCGI
    AllowOverride None
    Order allow,deny
    Allow from all
#  Order deny,allow
#  Deny from all
#  Allow from 127.0.0.1
    AuthName "Nagios Access"
    AuthType Basic
    AuthUserFile /etc/nagios/auth.users
    Require valid-user

Alias /nagios "/usr/share/nagios/htdocs"
&lt;Directory "/usr/share/nagios/htdocs"&gt;
#  SSLRequireSSL
    Options None
    AllowOverride None
    Order allow,deny
    Allow from all
#  Order deny,allow
#  Deny from all
#  Allow from 127.0.0.1
    AuthName "Nagios Access"
    AuthType Basic
    AuthUserFile /etc/nagios/auth.users
    Require nagiosadmin</pre>


<h3>Create password for nagiosadmin</h3>

<pre># htpasswd2 -c /etc/nagios/auth.users nagiosadmin</pre>


<h3>Add NAGIOS to apache config</h3>

<p>/etc/conf.d/apache</p>

<pre>APACHE2_OPTS="... -D NAGIOS -D PHP5"</pre>


<p>Add user nagios to apache group</p>

<pre># usermod -a -G nagios apache</pre>


<p>Start service</p>

<pre># rc-service nagios restart
# rc-service apache2 restart</pre>


<h2>CentOS</h2>

<pre># yum install "nagios*"
# htpasswd -c /etc/nagios/passwd admin
# chkconfig nagios on
# chkconfig httpd on
# service nagios start
# service httpd start
</pre>


<h2>Add routers/hosts, add service, add hooks</h2>

<h2>Intergrate with oVirt</h2>

<h1>using Foreman</h1>

<h2>Install</h2>

<h2>USE</h2>

<h2>Intergrate with oVirt</h2>

<p>TBD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Something About Curl &#8212; Connecting IPA Server Using Json as an Example]]></title>
    <link href="http://blog.lofyer.org/blog/2013/04/10/all-about-curl/"/>
    <updated>2013-04-10T00:00:00+08:00</updated>
    <id>http://blog.lofyer.org/blog/2013/04/10/all-about-curl</id>
    <content type="html"><![CDATA[<p>With Arduino as a server.</p>

<p>What we want is to keep a cookie and build a HEADER<br/>
<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html" title="HTTP/1.1" target="_blank"></p> <p>
  <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html</a></a>
</p></p>

<p>
  [P1]
</p>




<pre>
curl -e
curl -H referer:whereicamefrom.com
curl -d @file.txt
curl -d "somecmd"
curl -cookie
curl -D
</pre>




<p>
  [P2]<br /> <strong>Communicating with ipa server</strong><br /> <a href="https://git.fedorahosted.org/cgit/freeipa.git/tree/API.txt" title="freeipa api" target="_blank">https://git.fedorahosted.org/cgit/freeipa.git/tree/API.txt</a>
</p>




<p>
  Get ca.crt
</p>




<pre>curl -k https://$YOURHOST/ipa/config/ca.crt >> /tmp/ipa.ca.cert</pre>




<p>
  Get sessionid
</p>




<pre>
sessid=$(curl -v 
-H referer:https://ipa.test.net/ipa/ui/index.html 
-H "Content-Type:application/x-www-form-urlencoded" 
-H "Accept:*/*" 
--negotiate -u : 
--cacert ./ca.crt 
-d "user=admin" -d "password=12345678" 
-D cookie.txt 
-X POST 
-k      

https://ipa.test.net/ipa/session/login_password

2>&#038;1 | grep -o "ipa_session=[a-zA-Z0-9]*")
</pre>




<p>
  Post a json file with cmd in it
</p>




<pre>curl -v 
-H referer:https://ipa.test.net/ipa/ui/index.html 
-H "Content-Type:application/json" 
-H "Accept:applicaton/json" 
-negotiate -u : 
--cacert ./ca.crt 
--cookie $sessid 
-d @ipa.json 
-X POST 
-k      

https://ipa.test.net/ipa/session/json

</pre>




<p>
  Here&#8217;s a json file
</p>




<pre>
{
"method":"user_find",
"params":[
        [""],
        {"uid":"admin"}
        ],
"id":0
}
</pre>




<pre>
{
"method":"user_add",
"params":[
        [],
        {
         "uid":"test1",
         "cn":"cn",
         "givenname":"test1",
         "sn":"test1"
        }
        ],
"id":0
}
</pre>

]]></content>
  </entry>
  
</feed>
